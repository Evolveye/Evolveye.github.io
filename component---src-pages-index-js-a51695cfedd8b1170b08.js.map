{"version":3,"sources":["webpack:///./src/components/header.module.css","webpack:///./src/components/projects.module.css","webpack:///./src/components/header.js","webpack:///./src/components/projects.js","webpack:///./src/components/lastBlogposts.js","webpack:///./src/pages/index.js","webpack:///./src/components/lastBlogposts.module.css"],"names":["module","exports","translation","en","pl","langKey","queryData","useStaticQuery","className","styles","banner","wrapper","photo","fluid","childImageSharp","description","title","content","projectsData","fluidName","href","projectsWrapper","map","key","project","projectIconWrapper","projectIcon","posts","allMdx","nodes","postsEntries","length","id","excerpt","frontmatter","sneakPeek","tags","fm","fields","entry","titleLinkAddress","slug","body","info","blogposts","sectionTitle","to","pageContext"],"mappings":"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","file":"component---src-pages-index-js-a51695cfedd8b1170b08.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"header-module--banner--1kChs\",\"wrapper\":\"header-module--wrapper--2PxOX\",\"photo\":\"header-module--photo--1vqT0\",\"description\":\"header-module--description--1kWu4\",\"title\":\"header-module--title--NPYyh\",\"content\":\"header-module--content--tKujh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projectsWrapper\":\"projects-module--projectsWrapper--3dSAh\",\"project\":\"projects-module--project--1MbVm\",\"description\":\"projects-module--description--1nMF-\",\"projectIconWrapper\":\"projects-module--project-icon-wrapper--1A-x-\",\"projectIcon\":\"projects-module--project-icon--1kcsI\"};","import React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nimport styles from \"./header.module.css\"\r\n\r\n /**\r\n * @typedef {Object} QueryFlow\r\n * @property {Object} childImageSharp\r\n * @property {Object} childImageSharp.fluid\r\n */\r\n\r\n/**\r\n * @typedef {Object} QueryData\r\n * @property {QueryFlow} photo\r\n */\r\n\r\nconst query = graphql`\r\n  query Banner {\r\n    photo: file( relativePath:{ eq:\"photo.png\" } ) {\r\n      childImageSharp {\r\n        fluid( maxWidth:400 ) {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst translation = {\r\n  en: <>\r\n    <p>\r\n      I'm type of scientist, programmer experimenter.<br />\r\n      I like to play with code and know what, how, and why it works.\r\n    </p>\r\n    <p>\r\n      If I need something related to software, I just do it.<br />\r\n      If is it a challenge or something new -- it only encourages me.\r\n    </p>\r\n  </>,\r\n  pl: <>\r\n    <p>\r\n      Jestem typem naukowca, programistą eksperymentatorem.<br />\r\n      Lubię bawić się kodem i wiedzieć co, jak, i dlaczego działa.\r\n    </p>\r\n    <p>\r\n      Jeśli czegoś związnego z oprogramowaniem potrzebuję, to zwyczajnie to robię.<br />\r\n      Jeśli jest to wyzwanie, lub coś nowego -- tylko mnie to zachęca.\r\n    </p>\r\n  </>,\r\n}\r\n\r\nexport default ({ langKey }) => {\r\n  /** @type {QueryData} */\r\n  const queryData = useStaticQuery( query )\r\n\r\n  return <header className={styles.banner}>\r\n    <div className={styles.wrapper}>\r\n      <Img className={`neumorphizm-white ${styles.photo}`} fluid={queryData.photo.childImageSharp.fluid} />\r\n\r\n      <article className={styles.description}>\r\n        <h1 className={`boxed-title is-green ${styles.title}`}>Paweł Stolarski</h1>\r\n\r\n        <div className={styles.content}>\r\n          {translation[ langKey ]}\r\n        </div>\r\n      </article>\r\n    </div>\r\n  </header>\r\n}","import React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nimport styles from \"./projects.module.css\"\r\n\r\n /**\r\n * @typedef {Object} QueryFlow\r\n * @property {Object} childImageSharp\r\n * @property {Object} childImageSharp.fluid\r\n */\r\n\r\n/**\r\n * @typedef {Object} QueryData\r\n * @property {QueryFlow} cactu\r\n * @property {QueryFlow} discordBot\r\n * @property {QueryFlow} webGl\r\n * @property {QueryFlow} avatar\r\n */\r\n\r\nconst query = graphql`\r\n  query Projects {\r\n    cactu: file( relativePath:{ eq:\"cactu.png\" } ) {\r\n      childImageSharp {\r\n        fluid( maxWidth:300 ) {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n    discordBot: file( relativePath:{ eq:\"discord_bot.png\" } ) {\r\n      childImageSharp {\r\n        fluid( maxWidth:300 ) {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n    webGl: file( relativePath:{ eq:\"webgl.png\" } ) {\r\n      childImageSharp {\r\n        fluid( maxWidth:300 ) {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n    avatar: file( relativePath:{ eq:\"evolveye_avatar.png\" } ) {\r\n      childImageSharp {\r\n        fluid( maxWidth:300 ) {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst projectsData = [\r\n  {\r\n    title: {\r\n      pl: `Cactu`,\r\n      en: `Cactu`,\r\n    },\r\n    fluidName: `cactu`,\r\n    description: {\r\n      pl: <>\r\n        Rzeczy które tworzę lubię naznaczać konkretnym logiem -- <a href=\"https://codecactu.github.io/\">marką Cactu</a>.\r\n        Być moze kiedyś ktoś będzie chciał tworzyć razem ze mną pod wspólnym znakiem,\r\n        więc sygnowanie projektów znakiem towarowym połączonym niejako z mym nazwiskiem uważam za stosowne.\r\n        Dodatkowo logo zostało przygotowane tak, aby było łatwe do odwzorowania za pomocą grafiki wektorowej\r\n        (bowiem zostało za pomocą niej przygotowane). Sprawia to, że naznaczanie nim tworów\r\n        (przykłądowo porpzez wstawienie do stopki) jest proste, w przeciwieństwie do mojego, niewektorowego, avatara.\r\n      </>,\r\n      en: <>\r\n        I like to mark a things I create with specific logo -- <a href=\"https://codecactu.github.io/\">the Cactu brand</a>.\r\n        Perhaps someday somebody will want to make something with me under common sign,\r\n        so I consider it appropriate to sign the projects with a trademark connected with my name.\r\n        In addition, the logo has been prepared so that it is easy to reproduce with vector graphics\r\n        (it was made in that graphic). It makes marking creations with it (for example, by inserting into footer)\r\n        very easy, unlike to my non-vector eye-like avatar.\r\n      </>,\r\n    }\r\n  },\r\n  {\r\n    title: {\r\n      pl:`Discordowy bot`,\r\n      en: `Discord bot`,\r\n    },\r\n    fluidName: `discordBot`,\r\n    description: {\r\n      pl: <>\r\n        Zaczęło się od założenia małej społeczności. Z czasem zainteresowałem się API dostarczanym przez\r\n        platformę Discord. Tak powstał framework na bazie biblioteki <a href=\"https://discord.js.org/#/\">discord.js</a>.\r\n        Obecnie z pomocą tego bota automatyzuję wszystko co potrzebuję. Czy to mało ambitne odpowiedzi tekstem na tekst,\r\n        czy to edycja grafiki lub odpytywanie zewnętrznych API.\r\n      </>,\r\n      en: <>\r\n        All have been started from starting small community. Over time I became interested in the API provided by\r\n        Discord platform. This is how the <a href=\"https://discord.js.org/#/\">discord.js</a> based framework was created.\r\n        Currently with the help of that bot I automate everything I need. From unambitious text-to-text responses,\r\n        thought graphic editing, to querying external APIs.\r\n      </>,\r\n    }\r\n  },\r\n  {\r\n    title: {\r\n      pl: `Silnik grafiki trójwymiarowej`,\r\n      en: `3D graphgic engine`,\r\n    },\r\n    fluidName: `webGl`,\r\n    description: {\r\n      pl: <>\r\n        Nie lubię korzystać z bibliotek czy frameworków jeśli nie wiem co kryje się w ich wnętrzu.\r\n        Co sprawia, że dzieje się to co się dzieje.\r\n        Jako, że chciałem nauczyć się biblioteki <a href=\"https://threejs.org/\">Three.js</a> przeznaczonej\r\n        do rysowania rzeczy trójwymairowych, to nie dawał mi spokoju brak umiejętnosci samodzielnego rysowania w 3D.\r\n        Postanowiłem więc w ramach rozgrzewki zrobić swój prymitywny silnik do wyświetlania kształtów 3D.\r\n        Podobnie mam z innymi technologiami -- jeśli nie wiem jak działa, to mam wewnętrzną potrzebę się dowiedzieć.\r\n      </>,\r\n      en: <>\r\n        I don't like to use libraries or framework if I don't know what is inside.\r\n        What makes what is happening. As i wanted to learn <a href=\"https://threejs.org/\">Three.js</a> library for\r\n        drawing three-dimensional things, the lack of the ability to draw in 3D by myself bothered me.\r\n        So, I decided to make my own primitive 3D engine as part of my warm-up.\r\n        The same to others technologies -- if I don't know how it works, I have inner need to find out.\r\n      </>,\r\n    }\r\n  },\r\n  {\r\n    title: {\r\n      pl: `Ta strona`,\r\n      en: `This website`,\r\n    },\r\n    fluidName: `avatar`,\r\n    description: {\r\n      pl: <>\r\n        Programuję w zasadzie codziennie. Pomysłów mam wiele, chęci nauki jeszcze wiecej.\r\n        Wiele małych dzieł przepadło z tej racji że nie miałem kiedys konta github,\r\n        lub nie widziałem sensu we wrzucaniu nań projektów. W końcu do tego,\r\n        że postanowiłem zrobić sobie stronę z której byłbym zadowolony, a na której mógłbym\r\n        prowadzić swojego devloga.\r\n        {/* Więcej treści na temat strony to niczym treść o tutejszym blogu,\r\n        o którym wiecej napisałem <a href=\"/\">pod tym linkiem</a>. */}\r\n      </>,\r\n      en: <>\r\n        I program basically everyday. I have many ideas, the willingness to learn even more.\r\n        Many small works have been lost because I didn't have Github account, or saw no point\r\n        to upload projects to it. Finally, I decided to make a website that I would be happy about,\r\n        and where I could run my devlog (polish only, sorry; but maybe in the future...).\r\n        {/* If you know polish, you can look <a href=\"/\">here</a>. */}\r\n      </>,\r\n    }\r\n  },\r\n]\r\n\r\nexport default ({ langKey }) => {\r\n  /** @type {QueryData} */\r\n  const queryData = useStaticQuery( query )\r\n\r\n  return <section>\r\n    <h2 className={`h2 boxed-title is-red`}>\r\n      {langKey === `pl` ? `Projekty coś o mnie mówiące` : `Project that say something about me`}\r\n    </h2>\r\n\r\n    <div className={styles.projectsWrapper}>\r\n      {\r\n        projectsData.map( ({ title, fluidName, description }) =>\r\n          <article key={title[ langKey ]} className={styles.project}>\r\n            <div className={`neumorphizm-white ${styles.projectIconWrapper}`}>\r\n              <Img className={styles.projectIcon} fluid={queryData[ fluidName ].childImageSharp.fluid} />\r\n            </div>\r\n\r\n            <div className={styles.description}>\r\n              <h3>{title[ langKey ]}</h3>\r\n              <p>{description[ langKey ]}</p>\r\n            </div>\r\n          </article>\r\n        )\r\n      }\r\n    </div>\r\n  </section>\r\n}","import React from \"react\"\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport Link from \"./link\"\r\n\r\nimport { BlogpostEntry } from \"./post\"\r\n\r\nimport styles from \"./lastBlogposts.module.css\"\r\n\r\n/**\r\n * @typedef {Object} QueryData\r\n * @property {Object} data\r\n * @property {Object} data.allMdx\r\n * @property {Object[]} data.allMdx.nodes\r\n * @property {string} data.allMdx.nodes.id\r\n * @property {string} data.allMdx.nodes.excerpt\r\n * @property {Object} data.allMdx.nodes.frontmatter\r\n * @property {string} data.allMdx.nodes.frontmatter.date\r\n * @property {string} data.allMdx.nodes.frontmatter.title\r\n * @property {string} data.allMdx.nodes.frontmatter.author\r\n * @property {string} data.allMdx.nodes.frontmatter.categories\r\n * @property {string} data.allMdx.nodes.frontmatter.tags\r\n * @property {Object} data.allMdx.nodes.fields\r\n * @property {string} data.allMdx.nodes.fields.slug\r\n */\r\n\r\nconst query = graphql`query Posts {\r\n  allMdx(\r\n    sort: { fields:frontmatter___date, order:DESC },\r\n    filter: { frontmatter:{ published:{ eq:true } } },\r\n    limit: 4,\r\n  ) {\r\n    nodes {\r\n      id\r\n      excerpt( pruneLength:255 )\r\n      frontmatter {\r\n        title\r\n        author\r\n        date( formatString:\"DD-MM-YYYY\" )\r\n        sneakPeek\r\n        categories\r\n        tags\r\n      }\r\n      fields {\r\n        slug\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst translation = {\r\n  title: {\r\n    pl: `Moje ostatnie wpisy`,\r\n    en: `My recent entries`,\r\n  }\r\n}\r\n\r\nexport default ({ langKey }) => {\r\n  /** @type {QueryData} */\r\n  const queryData = useStaticQuery( query )\r\n  const posts = queryData.allMdx.nodes\r\n  // const { tags, categories } = posts.reduce( (obj, { frontmatter:{ tags, categories } }) => {\r\n  //   tags && tags.forEach( tag => obj.tags.add( tag ) )\r\n  //   categories.forEach( category => obj.categories.add( category ) )\r\n\r\n  //   return obj\r\n  // }, {\r\n  //   tags: new Set(),\r\n  //   categories: new Set()\r\n  // } )\r\n\r\n  const postsEntries = !posts.length\r\n    ? <p className={styles.info}>{langKey === `pl` ? `Postów jak na razie brak ;/` : `Currently, no posts here ;/`}</p>\r\n    : posts.map( ({ id, excerpt, frontmatter:{ tags, sneakPeek, ...fm }, fields }) =>\r\n      <BlogpostEntry\r\n        key={id}\r\n        langKey={langKey}\r\n        className={styles.entry}\r\n        titleLinkAddress={`/post${fields.slug}`}\r\n        frontmatter={fm}\r\n        body={sneakPeek || excerpt}\r\n      />\r\n    )\r\n\r\n  return <section className={styles.blogposts}>\r\n    <h2 className={`boxed-title is-blue ${styles.sectionTitle}`}>{translation.title[ langKey ]}</h2>\r\n    {langKey === `pl` ? postsEntries :\r\n      <p className={styles.info}>\r\n        Oops. This content is exclusive for polish readers. If you wanna be one of them, just click <Link langKey=\"pl\" to=\"/\"> that link</Link>.\r\n      </p>\r\n    }\r\n  </section>\r\n}","import React from \"react\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Header from \"../components/header\"\r\nimport Projects from \"../components/projects\"\r\nimport LastBlogpostsEntries from \"../components/lastBlogposts\"\r\n\r\nexport default ({ pageContext:{ langKey=`en` }={} }) =>\r\n  <Layout title={langKey === `pl` ? `Strona domowa` : `Homepage`} langKey={langKey}>\r\n    <Header langKey={langKey} />\r\n    <Projects langKey={langKey} />\r\n    <LastBlogpostsEntries langKey={langKey} />\r\n  </Layout>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"lastBlogposts-module--info--3M60P\"};"],"sourceRoot":""}